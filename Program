#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <ctype.h>
#include <string.h>

void brackprio(char* arr, int* start, int* end)
{
	int j = 0;
	start++;
	end++;
	while (*arr != '\0')
	{
		if (*arr == '(')
		{
			*start = j;
			start++;
		}
		else if (*arr == ')')
		{
			*end = j;
			end++;
		}
		arr++;
		j++;
	}
}

double operate(double a, double b, char oper)
{
	double res = 0;
	switch (oper)
	{
	case '+':res = a + b; break;
	case '-':res = a - b; break;
	case '*':res = a * b; break;
	case '/':res = a / b; break;
	}
	return res;
}

void Scan(double* result, char* oper, int* start, int* end, double* fresult, char* foper)
{
	int j, z, digit, k, l, a, coun, ocoun, count;
	char arr[255];
	double p;
	j = 0;
	k = 0;
	z = -1;
	l = 0;
	p = 1;
	a = 0;
	count = 0;
	coun = 1;
	ocoun = 1;
	digit = 0;
	printf("Enter the expression(no brackets in brackets): ");
	fgets(arr, 255, stdin);

	brackprio(arr, start, end);
	while ((arr[j] != '\0'))
	{
		if (arr[j] >= '0' && arr[j] <= '9')
		{
			digit = arr[j] - '0';
			if (count == 1)
			{
				p *= 0.1;
			}
			*result = *result * 10 + digit * p;
			coun = 0;
			ocoun = 0;
		}
		else if (arr[j] == '.')
		{
			count = 1;
		}
		else if (coun == 0)
		{
			result++;
			coun++;
			p = 1;
			count = 0;
			k++;
		}
		if ((arr[j] == '+' || arr[j] == '-' || arr[j] == '*' || arr[j] == '/') && (ocoun == 0))
		{
			*oper = arr[j];
			oper++;
			l++;
		}
		if ((arr[j] == '(') && (*start == -1))
		{
			for (int i = 0; i < k; i++)
				result--;
			for (int i = 0; i < l; i++)
				oper--;

			Calculate(a, result, oper, fresult, foper);
			result++;
			oper++;
			end++;
			start++;
			a = k;
			brackprio(arr, start, end);
		}
		else if (j == *start)
		{
			a = k;
		}
		if ((arr[j] == '(') && (end == 0))
		{
			for (int i = 0; i < k - a; i++)
				result--;
			for (int i = 0; i < l - a; i++)
				oper--;

			Calculate(a, result, oper, fresult, foper);
			result++;
			oper++;
			end++;
			start++;
			a = k;
			brackprio(arr, start, end);
		}
		else if (j == *end)
		{
			for (int i = 0; i < k - a; i++)
				result--;
			for (int i = 0; i < l - a; i++)
				oper--;
			Calculate(a, result, oper, fresult, foper);
			result++;
			oper++;
			end++;
			start++;
			a = k;
		}
		j++;
	}
	if (*start != -1)
	{
		return;
	}
	else
	{
		for (int i = 0; i < k - a; i++)
			result--;
		for (int i = 0; i < l - a; i++)
			oper--;
		if (arr[j] == '\0')
			Calculate(a, result, oper, fresult, foper);
	}
}

int Calculate(int start, double* result, char* oper, double* fresult, char* foper)
{
	int j = 0, i = 0, k = 0;
	while ((*result != 0) && (*(result + 1) != 0))
	{
		if (((*(oper + 1) == '*') || (*(oper + 1) == '/')) && (*(result + 2) != 0))
		{
			*(result + 2) = operate(*(result + 1), *(result + 2), *(oper + 1));
			*(result + 1) = 5.454647;
		}
		if (*(result + 1) == 5.454647)
		{
			*(result + 2) = operate(*result, *(result + 2), *oper);
			result++;
			oper++;
			j++;
		}
		else
			*(result + 1) = operate(*result, *(result + 1), *oper);
		oper++;
		result++;
		j++;
	}
	if ((*result != 0) && (*(result + 1) == 0) && (result - j == result) && (oper[j] == '0'))
	{
		*(fresult - j) = *result;
	}
	else if ((*(result + 1) == 0) && (*(result + 2) == 0))
	{
		if (*fresult != 0)
		{
			fresult++;
		}
		*fresult = *result;
		if (*foper != 0)
		{
			foper++;
		}
		*foper = *oper;
	}
	result++;
	oper++;
	return 1;
}

void frac(double num)
{
	int a = 1; int b = 1;
	int p = 0;
	double eps = 0.0000001;
	int ch, zn;
	int mn = 2; // множитель для начального приближения
	int iter = 0;
	ch = a; zn = b;
	for (int i = 0; i < 10000; i++)
	{
		if (num > 1)
		{
			num--;
			p += 1;
		}
		else if (num < -1)
		{
			num++;
			p += -1;
		}
		else
		{
			i = 10000;
		}
	}
	printf("%i ", p);
	if (num > 0)
	{
		printf("+ ");
	}
	else
	{
		printf("- ");
	}
	// Поиск начального приближения
	double c = 1;
	do {
		b++;
		c = (double)a / b;
	} while ((num - c) < 0);
	if ((num - c) < eps)
	{
		ch = a; zn = b;
		printf("%i/%i\n", ch, zn);
		return;
	}
	b--;
	c = (double)a / b;
	if ((num - c) > -eps)
	{
		ch = a; zn = b;
		printf("%i/%i\n", ch, zn);
		return;
	}
	// Уточнение
	while (iter < 20000)
	{
		int cc = a * mn, zz = b * mn;
		iter++;
		do {
			zz++;
			c = (double)cc / zz;
		} while ((num - c) < 0);
		if ((num - c) < eps)
		{
			ch = cc; zn = zz;
			printf("%i/%i\n", ch, zn);
			return;
		}
		zz--;
		c = (double)cc / zz;
		if ((num - c) > -eps)
		{
			ch = cc; zn = zz;
			printf("%i/%i\n", ch, zn);
			return;
		}
		mn++;
	}
	return;
}

int main(void)
{
	int b;
	int start[10] = { -1,-1,-1,-1,-1,-1,-1,-1,-1,-1 };
	int end[10] = { -1,-1,-1,-1,-1,-1,-1,-1,-1,-1 };
	double result[30] = { 0 };
	char oper[29] = { 0 };
	double fresult[30] = { 0 };
	char foper[29] = { 0 };
	float answer = 0;
	printf("1 - Arithmetic expression calculator.  2 - Convert decimat to proper fraction. ");
	scanf_s("%i%*c", &b);
	switch (b)
	{
	case 1:
		Scan(result, oper, start, end, fresult, foper);
		break;
	case 2:
		printf("\n Enter decimal number. \n");
		scanf_s("%f", &answer);
		break;
	default:
		printf("Error");
		exit(1);
		break;
	}
	if ((fresult[0] != 0) && (fresult[1] != 0))
	{
		for (int j = 0; j < 27; j++)
		{
			if ((fresult[j + 1] == 0) && (fresult[j + 2] == 0))
			{
				answer = fresult[j];
				j = 30;
			}
			else
				fresult[j + 1] = operate(fresult[j], fresult[j + 1], foper[j]);
		}
	}
	else if (fresult[0] != 0)
	{
		answer = fresult[0];
	}
	int k = 0;
	double p = answer;
	for (int i = 1; i < 9; i++)
	{
		p *= 10;
		if (fmod(p, 10) != 0)
		{
			k++;
		}
	}
	if (k == 0)
	{
		printf("%f", answer);
	}
	else
		frac(answer);

}
